name: CI/CD Build APK and Upload to Drive and Notify

on:
  push:
    branches: [main, test]
  workflow_dispatch:

jobs:
  delete-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0days

  Get_Info:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch_name.outputs.branch_name }}
      project_name: ${{ steps.project_name.outputs.project_name }}
      commit_author: ${{ steps.commit_author.outputs.commit_author }}
      commit_author_email: ${{ steps.commit_author_email.outputs.commit_author_email }}
      date_time: ${{ steps.date_time.outputs.date_time }}
      date_url: ${{ steps.date_url.outputs.date_url }}
    steps:
      - uses: actions/checkout@v4
      - id: branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      - id: project_name
        run: echo "project_name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
      - id: commit_author
        run: echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
      - id: commit_author_email
        run: echo "commit_author_email=$(git log -1 --pretty=%ae)" >> $GITHUB_OUTPUT
      - id: date_time
        run: echo "date_time=$(git log -1 --pretty=%cd --date=format:'%B %d, %Y %I:%M %p')" >> $GITHUB_OUTPUT
      - id: date_url
        run: echo "date_url=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d')" >> $GITHUB_OUTPUT

  Build_And_Upload_APK:
    needs: [Get_Info, delete-artifacts]
    runs-on: ubuntu-latest
    outputs:
      folder_id: ${{ steps.select_folder.outputs.folder_id }}
      upload_url: ${{ steps.upload_artifact.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.3
          channel: stable

      - name: Build APK
        run: |
          flutter clean
          flutter pub get
          flutter build apk --release --no-tree-shake-icons

      - name: Find APK with enhanced debugging
        id: find_apk
        run: |
          echo "🔍 Searching for APK files..."
          
          # Check multiple possible locations
          apk_paths=(
            "build/app/outputs/flutter-apk/app-release.apk"
            "build/app/outputs/apk/release/app-release.apk"
            "build/app/outputs/bundle/release/app-release.aab"
          )
          
          found_apk=""
          for path in "${apk_paths[@]}"; do
            if [ -f "$path" ]; then
              echo "✅ Found APK at: $path"
              found_apk="$path"
              break
            else
              echo "❌ Not found: $path"
            fi
          done
          
          if [ -z "$found_apk" ]; then
            echo "❌ No APK found in expected locations!"
            echo "📁 Listing build directory structure:"
            find build/ -type f -name "*.apk" -o -name "*.aab" 2>/dev/null || echo "No APK/AAB files found"
            echo "📁 Full build directory:"
            ls -la build/ 2>/dev/null || echo "Build directory doesn't exist"
            if [ -d "build/app/outputs" ]; then
              echo "📁 Outputs directory:"
              find build/app/outputs -type f 2>/dev/null || echo "Outputs directory is empty"
            fi
            exit 1
          fi
          
          echo "📏 APK size: $(du -h "$found_apk" | cut -f1)"
          echo "apk_path=$found_apk" >> $GITHUB_OUTPUT

      - name: Select Google Drive folder
        id: select_folder
        run: |
          if [[ "${{ needs.Get_Info.outputs.branch_name }}" == "main" ]]; then
            echo "folder_id=${{ secrets.MAIN_FOLDER_ID }}" >> $GITHUB_OUTPUT
          else
            echo "folder_id=${{ secrets.TEST_FOLDER_ID }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload to filepush.dev with enhanced error handling
        id: upload_artifact
        run: |
          apk="${{ steps.find_apk.outputs.apk_path }}"
          
          echo "📦 Uploading $(basename "$apk") ($(du -h "$apk" | cut -f1))"
          
          # Verify file exists before upload
          if [ ! -f "$apk" ]; then
            echo "❌ APK file not found: $apk"
            exit 1
          fi
          
          # Upload with enhanced error handling
          echo "🔄 Starting upload..."
          response=$(curl -s -w "\n%{http_code}" -F "file=@$apk" https://filepush.dev/api/upload)
          
          # Split response and HTTP code
          http_code=$(echo "$response" | tail -n1)
          json_response=$(echo "$response" | head -n -1)
          
          echo "📊 HTTP Status: $http_code"
          echo "📋 Response: $json_response"
          
          # Check HTTP status
          if [ "$http_code" != "200" ]; then
            echo "❌ Upload failed with HTTP $http_code"
            echo "Full response: $response"
            exit 1
          fi
          
          # Extract URL with better error handling
          url=$(echo "$json_response" | grep -oP '"url":"\K[^"]+' || echo "")
          
          if [ -z "$url" ]; then
            echo "❌ Could not extract URL from response"
            echo "JSON Response: $json_response"
            # Try alternative JSON parsing
            url=$(echo "$json_response" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('url', ''))" 2>/dev/null || echo "")
            if [ -z "$url" ]; then
              echo "❌ Alternative parsing also failed"
              exit 1
            fi
          fi
          
          echo "✅ Successfully uploaded to: $url"
          echo "upload_url=$url" >> $GITHUB_OUTPUT

      - name: Upload APK to GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: "${{ steps.find_apk.outputs.apk_path }}"

  Notify_User:
    needs: [Get_Info, Build_And_Upload_APK]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Notify Telegram Channel
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            🚀 *New APK Build Uploaded* 🚀

            🔔 *Project:* `${{ needs.Get_Info.outputs.project_name }}`
            🤖 *Branch:* `${{ needs.Get_Info.outputs.branch_name }}`
            👤 *Author:* `${{ needs.Get_Info.outputs.commit_author }}`
            📩 *Email:* `${{ needs.Get_Info.outputs.commit_author_email }}`
            📅  `${{ needs.Get_Info.outputs.date_time }}`

            🔗 [Download APK](${{ needs.Build_And_Upload_APK.outputs.upload_url }})

      - name: Notify Gmail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_PASSWORD }}
          from: ${{ needs.Get_Info.outputs.commit_author_email }}
          to: mazenn770@gmail.com
          subject: "CI 👉🏻 New APK Build Uploaded"
          convert_markdown: true
          body: |
            Dear Sir,

            A new APK build has been uploaded.

            - Project: ${{ needs.Get_Info.outputs.project_name }}
            - Branch: ${{ needs.Get_Info.outputs.branch_name }}
            - Date: ${{ needs.Get_Info.outputs.date_time }}

            Download it here:
            🔗 APK: ${{ needs.Build_And_Upload_APK.outputs.upload_url }}

            Best regards,  
            ${{ needs.Get_Info.outputs.commit_author }}  
            Flutter Developer  
            IX Solutions Company  
            Email: ${{ needs.Get_Info.outputs.commit_author_email }}
