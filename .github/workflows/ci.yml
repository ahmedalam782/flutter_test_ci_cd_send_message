name: CI/CD Build APK and Upload to Drive and Notify

on:
  push:
    branches: [main, test]
  workflow_dispatch:

jobs:
  delete-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0days

  Get_Info:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch_name.outputs.branch_name }}
      project_name: ${{ steps.project_name.outputs.project_name }}
      commit_author: ${{ steps.commit_author.outputs.commit_author }}
      commit_author_email: ${{ steps.commit_author_email.outputs.commit_author_email }}
      date_time: ${{ steps.date_time.outputs.date_time }}
      date_url: ${{ steps.date_url.outputs.date_url }}
    steps:
      - uses: actions/checkout@v4
      - id: branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      - id: project_name
        run: echo "project_name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
      - id: commit_author
        run: echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
      - id: commit_author_email
        run: echo "commit_author_email=$(git log -1 --pretty=%ae)" >> $GITHUB_OUTPUT
      - id: date_time
        run: echo "date_time=$(git log -1 --pretty=%cd --date=format:'%B %d, %Y %I:%M %p')" >> $GITHUB_OUTPUT
      - id: date_url
        run: echo "date_url=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d')" >> $GITHUB_OUTPUT

  Build_And_Upload_APK:
    needs: [Get_Info, delete-artifacts]
    runs-on: ubuntu-latest
    outputs:
      folder_id: ${{ steps.select_folder.outputs.folder_id }}
      upload_url: ${{ steps.upload_artifact.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.3
          channel: stable

      - name: Build APK
        run: |
          flutter clean
          flutter pub get
          flutter build apk --release --no-tree-shake-icons

      - name: Find APK with enhanced debugging
        id: find_apk
        run: |
          echo "üîç Searching for APK files..."
          
          # Check multiple possible locations
          apk_paths=(
            "build/app/outputs/flutter-apk/app-release.apk"
            "build/app/outputs/apk/release/app-release.apk"
            "build/app/outputs/bundle/release/app-release.aab"
          )
          
          found_apk=""
          for path in "${apk_paths[@]}"; do
            if [ -f "$path" ]; then
              echo "‚úÖ Found APK at: $path"
              found_apk="$path"
              break
            else
              echo "‚ùå Not found: $path"
            fi
          done
          
          if [ -z "$found_apk" ]; then
            echo "‚ùå No APK found in expected locations!"
            echo "üìÅ Listing build directory structure:"
            find build/ -type f -name "*.apk" -o -name "*.aab" 2>/dev/null || echo "No APK/AAB files found"
            echo "üìÅ Full build directory:"
            ls -la build/ 2>/dev/null || echo "Build directory doesn't exist"
            if [ -d "build/app/outputs" ]; then
              echo "üìÅ Outputs directory:"
              find build/app/outputs -type f 2>/dev/null || echo "Outputs directory is empty"
            fi
            exit 1
          fi
          
          echo "üìè APK size: $(du -h "$found_apk" | cut -f1)"
          echo "apk_path=$found_apk" >> $GITHUB_OUTPUT

      - name: Select Google Drive folder
        id: select_folder
        run: |
          if [[ "${{ needs.Get_Info.outputs.branch_name }}" == "main" ]]; then
            echo "folder_id=${{ secrets.MAIN_FOLDER_ID }}" >> $GITHUB_OUTPUT
          else
            echo "folder_id=${{ secrets.TEST_FOLDER_ID }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload APK with multiple fallback services
        id: upload_artifact
        run: |
          apk="${{ steps.find_apk.outputs.apk_path }}"
          
          echo "üì¶ Uploading $(basename "$apk") ($(du -h "$apk" | cut -f1))"
          
          # Verify file exists
          if [ ! -f "$apk" ]; then
            echo "‚ùå APK file not found: $apk"
            exit 1
          fi
          
          upload_success=false
          final_url=""
          
          # Service 1: Try transfer.sh (most reliable)
          echo "üîÑ Trying transfer.sh..."
          if url=$(curl -s -m 300 --upload-file "$apk" "https://transfer.sh/$(basename "$apk")" 2>/dev/null); then
            if [[ "$url" =~ ^https:// ]] && [[ ${#url} -gt 20 ]]; then
              echo "‚úÖ transfer.sh success: $url"
              final_url="$url"
              upload_success=true
            else
              echo "‚ùå transfer.sh returned invalid URL: $url"
            fi
          else
            echo "‚ùå transfer.sh failed"
          fi
          
          # Service 2: Try filepush.dev as fallback
          if [ "$upload_success" = false ]; then
            echo "üîÑ Trying filepush.dev..."
            response=$(curl -s -m 300 -w "%{http_code}" -F "file=@$apk" https://filepush.dev/api/upload 2>/dev/null || echo "")
            
            if [ -n "$response" ]; then
              http_code="${response: -3}"
              json_response="${response%???}"
              
              if [ "$http_code" = "200" ]; then
                url=$(echo "$json_response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('url', ''))
except:
    print('')
" 2>/dev/null || echo "")
                
                if [ -n "$url" ] && [[ "$url" =~ ^https:// ]]; then
                  echo "‚úÖ filepush.dev success: $url"
                  final_url="$url"
                  upload_success=true
                else
                  echo "‚ùå filepush.dev returned invalid URL"
                fi
              else
                echo "‚ùå filepush.dev returned HTTP $http_code"
              fi
            else
              echo "‚ùå filepush.dev no response"
            fi
          fi
          
          # Service 3: Try file.io as second fallback
          if [ "$upload_success" = false ]; then
            echo "üîÑ Trying file.io..."
            response=$(curl -s -m 300 -F "file=@$apk" https://file.io 2>/dev/null || echo "")
            
            if [ -n "$response" ]; then
              url=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('link', ''))
except:
    print('')
" 2>/dev/null || echo "")
              
              if [ -n "$url" ] && [[ "$url" =~ ^https:// ]]; then
                echo "‚úÖ file.io success: $url"
                final_url="$url"
                upload_success=true
              else
                echo "‚ùå file.io returned invalid URL"
              fi
            else
              echo "‚ùå file.io no response"
            fi
          fi
          
          # Service 4: Try 0x0.st as final fallback
          if [ "$upload_success" = false ]; then
            echo "üîÑ Trying 0x0.st..."
            url=$(curl -s -m 300 -F "file=@$apk" https://0x0.st 2>/dev/null || echo "")
            
            if [ -n "$url" ] && [[ "$url" =~ ^https:// ]] && [[ ${#url} -gt 15 ]]; then
              echo "‚úÖ 0x0.st success: $url"
              final_url="$url"
              upload_success=true
            else
              echo "‚ùå 0x0.st failed or invalid URL: $url"
            fi
          fi
          
          # Service 5: Try tmpfiles.org as last resort
          if [ "$upload_success" = false ]; then
            echo "üîÑ Trying tmpfiles.org..."
            response=$(curl -s -m 300 -F "file=@$apk" https://tmpfiles.org/api/v1/upload 2>/dev/null || echo "")
            
            if [ -n "$response" ]; then
              url=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if data.get('status') == 'success':
        print(data.get('data', {}).get('url', ''))
    else:
        print('')
except:
    print('')
" 2>/dev/null || echo "")
              
              if [ -n "$url" ] && [[ "$url" =~ ^https:// ]]; then
                echo "‚úÖ tmpfiles.org success: $url"
                final_url="$url"
                upload_success=true
              else
                echo "‚ùå tmpfiles.org returned invalid URL"
              fi
            else
              echo "‚ùå tmpfiles.org no response"
            fi
          fi
          
          if [ "$upload_success" = false ]; then
            echo "‚ùå All upload services failed"
            echo "üîÑ Creating GitHub Release as final fallback..."
            
            # Create a GitHub release as absolute final fallback
            tag_name="build-${{ github.run_number }}-${{ needs.Get_Info.outputs.branch_name }}"
            release_name="APK Build #${{ github.run_number }} (${{ needs.Get_Info.outputs.branch_name }})"
            
            # Create release
            release_response=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "{
                \"tag_name\": \"$tag_name\",
                \"name\": \"$release_name\",
                \"body\": \"üöÄ **Automated APK Build**\\n\\n- **Branch:** \`${{ needs.Get_Info.outputs.branch_name }}\`\\n- **Author:** ${{ needs.Get_Info.outputs.commit_author }}\\n- **Date:** ${{ needs.Get_Info.outputs.date_time }}\\n\\nDownload the APK below ‚¨áÔ∏è\",
                \"draft\": false,
                \"prerelease\": ${{ needs.Get_Info.outputs.branch_name != 'main' }}
              }")
            
            upload_url=$(echo "$release_response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('upload_url', '').replace('{?name,label}', ''))
except:
    print('')
" 2>/dev/null || echo "")
            
            if [ -n "$upload_url" ]; then
              # Upload APK to release
              curl -s -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/vnd.android.package-archive" \
                --data-binary "@$apk" \
                "$upload_url?name=$(basename "$apk")"
              
              final_url="https://github.com/${{ github.repository }}/releases/download/$tag_name/$(basename "$apk")"
              echo "‚úÖ GitHub Release created: $final_url"
              upload_success=true
            fi
          fi
          
          if [ "$upload_success" = false ]; then
            echo "‚ùå All upload methods failed including GitHub Release"
            exit 1
          fi
          
          echo "upload_url=$final_url" >> $GITHUB_OUTPUT

      - name: Upload APK to GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: "${{ steps.find_apk.outputs.apk_path }}"

  Notify_User:
    needs: [Get_Info, Build_And_Upload_APK]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Notify Telegram Channel
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            üöÄ *New APK Build Uploaded* üöÄ

            üîî *Project:* `${{ needs.Get_Info.outputs.project_name }}`
            ü§ñ *Branch:* `${{ needs.Get_Info.outputs.branch_name }}`
            üë§ *Author:* `${{ needs.Get_Info.outputs.commit_author }}`
            üì© *Email:* `${{ needs.Get_Info.outputs.commit_author_email }}`
            üìÖ  `${{ needs.Get_Info.outputs.date_time }}`

            üîó [Download APK](${{ needs.Build_And_Upload_APK.outputs.upload_url }})

      - name: Notify Gmail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_PASSWORD }}
          from: ${{ needs.Get_Info.outputs.commit_author_email }}
          to: mazenn770@gmail.com
          subject: "CI üëâüèª New APK Build Uploaded"
          convert_markdown: true
          body: |
            Dear Sir,

            A new APK build has been uploaded.

            - Project: ${{ needs.Get_Info.outputs.project_name }}
            - Branch: ${{ needs.Get_Info.outputs.branch_name }}
            - Date: ${{ needs.Get_Info.outputs.date_time }}

            Download it here:
            üîó APK: ${{ needs.Build_And_Upload_APK.outputs.upload_url }}

            Best regards,  
            ${{ needs.Get_Info.outputs.commit_author }}  
            Flutter Developer  
            IX Solutions Company  
            Email: ${{ needs.Get_Info.outputs.commit_author_email }}
