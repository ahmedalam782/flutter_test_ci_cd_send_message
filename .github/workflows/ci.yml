name: CI/CD Build APK and Upload to file.io and Notify

on:
  push:
    branches:
      - main
      - test
  workflow_dispatch:

jobs:
  delete-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0days

  Get_Info:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch_name.outputs.branch_name }}
      project_name: ${{ steps.project_name.outputs.project_name }}
      commit_author: ${{ steps.commit_author.outputs.commit_author }}
      commit_author_email: ${{ steps.commit_author_email.outputs.commit_author_email }}
      date_time: ${{ steps.date_time.outputs.date_time }}
      date_url: ${{ steps.date_url.outputs.date_url }}
    steps:
      - uses: actions/checkout@v2
      - id: branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      - id: project_name
        run: echo "project_name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
      - id: commit_author
        run: echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
      - id: commit_author_email
        run: echo "commit_author_email=$(git log -1 --pretty=%ae)" >> $GITHUB_OUTPUT
      - id: date_time
        run: echo "date_time=$(git log -1 --pretty=%cd --date=format:'%B %d, %Y %I:%M %p')" >> $GITHUB_OUTPUT
      - id: date_url
        run: echo "date_url=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d')" >> $GITHUB_OUTPUT

  Build_And_Upload_APK:
    needs: [Get_Info, delete-artifacts]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.upload_artifact.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.3
          channel: stable

      - name: Build APK
        run: |
          flutter clean
          flutter pub get
          flutter build apk --release --no-tree-shake-icons

      - name: Find and verify APK
        id: find_apk
        run: |
          echo "Searching for APK files..."
          find . -name "*.apk" -type f
          
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            apk_path="build/app/outputs/flutter-apk/app-release.apk"
          elif [ -f "build/app/outputs/apk/release/app-release.apk" ]; then
            apk_path="build/app/outputs/apk/release/app-release.apk"
          else
            apk_path=$(find . -name "*release*.apk" -type f | head -n 1)
          fi
          
          if [ -z "$apk_path" ]; then
            echo "APK not found!"
            exit 1
          fi
          
          echo "Found APK at: $apk_path"
          echo "apk_path=$apk_path" >> $GITHUB_OUTPUT

      - name: Install jq
        run: sudo apt-get install -y jq

      - id: upload_artifact
        name: Upload to file.io
        run: |
          apk="${{ steps.find_apk.outputs.apk_path }}"
          response=$(curl -s -F "file=@$apk" https://file.io/?expires=1w)
          echo "Response: $response"
          url=$(echo "$response" | jq -r '.link')
          if [ "$url" == "null" ] || [ -z "$url" ]; then
            echo "❌ Upload failed"
            exit 1
          fi
          echo "✅ Uploaded to: $url"
          echo "upload_url=$url" >> $GITHUB_OUTPUT

      - name: Upload APK to GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: "${{ steps.find_apk.outputs.apk_path }}"

  Notify_User:
    needs: [Get_Info, Build_And_Upload_APK]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Telegram Channel
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            🚀 *New APK Build Uploaded* 🚀

            🔔 *Project:* `${{ needs.Get_Info.outputs.project_name }}`
            🤖 *Branch:* `${{ needs.Get_Info.outputs.branch_name }}`
            👤 *Author:* `${{ needs.Get_Info.outputs.commit_author }}`
            📩 *Email:* `${{ needs.Get_Info.outputs.commit_author_email }}`
            📅  `${{ needs.Get_Info.outputs.date_time }}`

            🔗 [Download APK](${{ needs.Build_And_Upload_APK.outputs.upload_url }})

      - name: Notify Gmail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_PASSWORD }}
          from: ${{ secrets.GMAIL_USERNAME }}
          to: mazenn770@gmail.com
          subject: "CI 👉🏻 New APK Build Uploaded"
          convert_markdown: true
          body: |
            Dear Sir,

            A new APK build has been uploaded:

            - Project: ${{ needs.Get_Info.outputs.project_name }}
            - Branch: ${{ needs.Get_Info.outputs.branch_name }}
            - Date: ${{ needs.Get_Info.outputs.date_time }}

            Download it here:
            🔗 File.io: ${{ needs.Build_And_Upload_APK.outputs.upload_url }}

            Best regards,  
            ${{ needs.Get_Info.outputs.commit_author }}  
            Flutter Developer  
            IX Solutions Company  
            Email: ${{ needs.Get_Info.outputs.commit_author_email }}
